package by.bsuir.hotelReservation.connection.pool;


import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;


public final class ConnectionPoolImpl implements ConnectionPool{
	private static final String DRIVER_NAME=  "com.mysql.jdbc.Driver";
	private static final String URL=  "jdbc:mysql://localhost:3306/users";
	private static final String USER= "root";
	private static final String PASSWORD=  "1234";
	private static final String MESSAGE_SQL_EXCEPTION_CONNECTION_POOL=  "SQLException in ConnectionPool";
	private static final String MESSAGE_ERROR_CLOSING_CONNECTION="Error closing the connection.";
	private static final String MESSAGE_ERROR_FIND_DATABASE_DRIVER="Can't find database driver class";
	private static final String MESSAGE_ERROR_CONNECTION_DATA_SOURCE="Error connecting to the data source.";
	private static final String MESSAGE_CONNECTION_NOT_RETURN_POOL="Connection isn't return to the pool.";
	private static final String MESSAGE_RESULTSET_IS_NOT_CLOSED= "ResultSet isn't closed.";
	private static final String MESSAGE_STATEMENT_IS_NOT_CLOSED="Statement isn't closed.";
	private static final String MESSAGE_ERROR_REMOVE_DATA_SOURCE="Error remove to the data source.";
	private static final String MESSAGE_ATTEMPTING_CLOSE_CLOSED_CONNECTION="Attempting to close closed connection.";
	private static final String MESSAGE_ERROR_DELETING_CONNECTION= "Error deleting connection from the given away connections pool.";
	private static final String MESSAGE_ERROR_ALLOCATING_CONNECTION= "Error allocating connection in the pool.";

	private BlockingQueue<Connection> availableConnections;
	private BlockingQueue<Connection> usedConnections;
	private String driverName;
	private String url;
	private String user;
	private String password;
	private int poolSize;

	ConnectionPoolImpl() {
		this.driverName = DRIVER_NAME;
		this.url = URL;
		this.user = USER;
		this.password = PASSWORD;
	    this.poolSize =2;
	}
	
public void initPoolData() throws ConnectionPoolException {
		try {
			Class.forName(driverName);
			usedConnections = new ArrayBlockingQueue<Connection>(poolSize);
			availableConnections = new ArrayBlockingQueue<Connection>(poolSize);
			for (int i = 0; i < poolSize; i++) {
				Connection connection = DriverManager.getConnection(url, user, password);
				PooledConnection pooledConnection = new PooledConnection(connection);
				availableConnections.add(pooledConnection);
			}
		} catch (SQLException e) {
			
			throw new ConnectionPoolException(MESSAGE_SQL_EXCEPTION_CONNECTION_POOL, e);
			
		} catch (ClassNotFoundException e) {
			
			throw new ConnectionPoolException(MESSAGE_ERROR_FIND_DATABASE_DRIVER, e);
		}
	}

	public void dispose() {
		clearConnectionQueue();
	}

	private void clearConnectionQueue() {
		try {
			closeConnectionsQueue(usedConnections);
			closeConnectionsQueue(availableConnections);
		} catch (SQLException e) {
			
		}
	}

	public Connection takeConnection() throws ConnectionPoolException {
		Connection connection = null;
		try {
			connection = availableConnections.take();
			usedConnections.add(connection);
		} catch (InterruptedException e) {
			throw new ConnectionPoolException(MESSAGE_ERROR_CONNECTION_DATA_SOURCE, e);
		}
		return connection;
	}
	
	public void removeConnection() throws ConnectionPoolException {
		Connection connection;
		try {
			connection=usedConnections.take();
			availableConnections.add(connection);
		} catch (InterruptedException e) {
				
		}	
	}
	

	public void closeConnection(Connection con, Statement st, ResultSet rs) {
		try {
			con.close();
		} catch (SQLException e) {

		}
		try {
			rs.close();
		} catch (SQLException e) {

		}
		try {
			st.close();
		} catch (SQLException e) {

		}
	}

	public void closeConnection(Connection con, Statement st) {
		try {
			con.close();
		} catch (SQLException e) {

		}
		try {
			st.close();
		} catch (SQLException e) {

		}
	}

	private void closeConnectionsQueue(BlockingQueue<Connection> queue) throws SQLException {
		Connection connection;
		while ((connection = queue.poll()) != null) {
			if (!connection.getAutoCommit()) {
				connection.commit();
			}
			((PooledConnection) connection).reallyClose();
		}
	}

	private class PooledConnection implements Connection {
		private Connection connection;

		public PooledConnection(Connection c) throws SQLException {
			this.connection = c;
			this.connection.setAutoCommit(true);
		}

		public void reallyClose() throws SQLException {
			connection.close();
		}

		@Override
		public void clearWarnings() throws SQLException {
			connection.clearWarnings();
		}

		@Override
		public void close() throws SQLException {
			if (connection.isClosed()) {
				throw new SQLException(MESSAGE_ATTEMPTING_CLOSE_CLOSED_CONNECTION);
			}

			if (connection.isReadOnly()) {
				connection.setReadOnly(false);
			}
			if (!usedConnections.remove(this)) {
				throw new SQLException(MESSAGE_ERROR_DELETING_CONNECTION);
			}
			if (!availableConnections.offer(this)) {
				throw new SQLException(MESSAGE_ERROR_ALLOCATING_CONNECTION);
			}
		}

		@Override
		public void commit() throws SQLException {
			connection.commit();
		}

		@Override
		public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
			return connection.createArrayOf(typeName, elements);
		}

		@Override
		public Blob createBlob() throws SQLException {
			return connection.createBlob();
		}

		@Override
		public Clob createClob() throws SQLException {
			return connection.createClob();
		}

		@Override
		public NClob createNClob() throws SQLException {
			return connection.createNClob();
		}

		@Override
		public SQLXML createSQLXML() throws SQLException {
			return connection.createSQLXML();
		}

		@Override
		public Statement createStatement() throws SQLException {
			return connection.createStatement();
		}

		@Override
		public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
			return connection.createStatement(resultSetType, resultSetConcurrency);
		}

		@Override
		public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
				throws SQLException {
			return connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
		}

		@Override
		public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
			return connection.createStruct(typeName, attributes);
		}

		@Override
		public boolean getAutoCommit() throws SQLException {
			return connection.getAutoCommit();
		}

		@Override
		public String getCatalog() throws SQLException {
			return connection.getCatalog();
		}

		@Override
		public Properties getClientInfo() throws SQLException {
			return connection.getClientInfo();
		}

		@Override
		public String getClientInfo(String name) throws SQLException {
			return connection.getClientInfo(name);
		}

		@Override
		public int getHoldability() throws SQLException {
			return connection.getHoldability();
		}

		@Override
		public DatabaseMetaData getMetaData() throws SQLException {
			return connection.getMetaData();

		}

	}
}
