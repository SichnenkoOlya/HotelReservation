package by.bsuir.hotelReservation.dao.impl;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import by.bsuir.hotelReservation.connection.pool.ConnectionPool;
import by.bsuir.hotelReservation.connection.pool.ConnectionPoolException;
import by.bsuir.hotelReservation.connection.pool.ConnectionPoolFactory;
import by.bsuir.hotelReservation.dao.DAOUser;
import by.bsuir.hotelReservation.dao.exception.DAOException;
import by.bsuir.hotelReservation.domain.User;

public class DAOUserImpl implements DAOUser {
	private static final String USER_SELECT_LOGIN_PASSWORD  = "SELECT * FROM users WHERE name=? AND password=?";
	private static final String USER_SELECT_LOGIN = "SELECT * FROM USERS WHERE name=?";
	private static final String USER_ADD = "INSERT INTO USERS (name,PASSWORD,ACCESSRIGHTS) VALUES (?,?,?)";
	private static final String GUEST ="guest";
	private static final String EXIST ="exist";
	private static final String MESSAGE_ERROR_CONNECTION_POOL = "Error at connection pool.";
	private static final String MESSAGE_ERROR_SQL = "Error at sql.";
	private static final String MESSAGE_ERROR_REMOVE_CONNECTION = "Error at remove connection.";
	private static final int FIRST = 1;
	private static final int SECOND= 2;
	private static final int THIRD = 3;
	private static final int FOURTH = 4;
	private static final int FIFTH = 5;
	
	@Override
	public User authorization(String login, String password) throws DAOException {
		Connection connection = null;
		ResultSet rs = null;
		User user = null;
		
		ConnectionPoolFactory ObjectCPFactory = ConnectionPoolFactory.getInstance();
		ConnectionPool cp = ObjectCPFactory.getConnectionPool();
		try {
			connection = cp.takeConnection();
			PreparedStatement ps = connection.prepareStatement(USER_SELECT_LOGIN_PASSWORD);
			ps.setString(FIRST, login);
			ps.setString(SECOND, password);
			rs = ps.executeQuery();
			while (rs.next()) {
				//int id = rs.getInt(FIRST);
				String loginBD = rs.getString(SECOND);
				String passwordBD = rs.getString(THIRD);
				String accessRights = rs.getString(FOURTH);
				user = new User();
				user.setName(loginBD);
				user.setPassword(Integer.parseInt(passwordBD));
				user.setAccessRights(Integer.parseInt(accessRights));
				
			}

		} catch (ConnectionPoolException e) {
			throw new DAOException(e);
		} catch (SQLException e) {

			throw new DAOException(e);	
		}
		finally{
			try {
				cp.removeConnection();
			} catch (ConnectionPoolException e) {

			}
		}
		return user;
	}

	@Override
	public User registration(String login, String password) throws DAOException {
		Connection connection = null;
		ResultSet rs = null;
		User user = null;
		
		ConnectionPoolFactory ObjectCPFactory = ConnectionPoolFactory.getInstance();
		ConnectionPool cp = ObjectCPFactory.getConnectionPool();
		try {
			connection = cp.takeConnection();
			
			PreparedStatement ps = connection.prepareStatement(USER_SELECT_LOGIN );
			ps.setString(FIRST, login);
			rs = ps.executeQuery();
			
			int i=0;
			while (rs.next()) {
				 i =rs.getInt("id");
			}
			if (i==0){
				ps = connection.prepareStatement(USER_ADD);

				ps.setString(FIRST, login);
				ps.setString(SECOND, password);
				ps.setInt(THIRD, 0);
				ps.executeUpdate();

				ps = connection.prepareStatement(USER_SELECT_LOGIN_PASSWORD);
				ps.setString(FIRST, login);
				ps.setString(SECOND, password);
				rs = ps.executeQuery();
				while (rs.next()) {
					int id = rs.getInt(FIRST);
					String nameBD = rs.getString(SECOND);
					String passwordBD = rs.getString(THIRD);
					String accessRights = rs.getString(FOURTH);
					user = new User();
					user.setName(nameBD);
					user.setPassword(Integer.parseInt(passwordBD));
					user.setAccessRights(Integer.parseInt(accessRights));
				  }
			   }
			}catch (ConnectionPoolException e) {

				throw new DAOException(e);
			} catch (SQLException e) {
				
				throw new DAOException(e);
			}
			finally{
				try {
					cp.removeConnection();
				} catch (ConnectionPoolException e) {

				}
		}
		return user;
	}	
}